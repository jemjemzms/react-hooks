{"map":"{\"version\":3,\"sources\":[\"/Users/jemjemzms/Projects/react-hooks/src/App.js\",\"/Users/jemjemzms/Projects/react-hooks/src/serviceWorker.js\",\"/Users/jemjemzms/Projects/react-hooks/src/index.js\"],\"names\":[\"Todo\",\"_ref\",\"todo\",\"index\",\"completeTodo\",\"removeTodo\",\"react_default\",\"a\",\"createElement\",\"style\",\"textDecoration\",\"isCompleted\",\"className\",\"text\",\"onClick\",\"TodoForm\",\"_ref2\",\"addTodo\",\"_useState\",\"useState\",\"_useState2\",\"Object\",\"slicedToArray\",\"value\",\"setValue\",\"onSubmit\",\"e\",\"preventDefault\",\"type\",\"placeholder\",\"onChange\",\"target\",\"App\",\"_useState3\",\"_useState4\",\"todos\",\"setTodos\",\"newTodos\",\"toConsumableArray\",\"splice\",\"map\",\"key\",\"concat\",\"Boolean\",\"window\",\"location\",\"hostname\",\"match\",\"ReactDOM\",\"render\",\"src_App\",\"document\",\"getElementById\",\"navigator\",\"serviceWorker\",\"ready\",\"then\",\"registration\",\"unregister\"],\"mappings\":\"0MAGA,SAASA,EAATC,GAAyD,IAAzCC,EAAyCD,EAAzCC,KAAMC,EAAmCF,EAAnCE,MAAOC,EAA4BH,EAA5BG,aAAcC,EAAcJ,EAAdI,WACzC,OACEC,EAAAC,EAAAC,cAAA,MAAA,CAAKC,MAAO,CAACC,eAAgBR,EAAKS,YAAc,eAAiB,IAAKC,UAAU,QAC5EV,EAAKW,KACPP,EAAAC,EAAAC,cAAA,MAAA,KACEF,EAAAC,EAAAC,cAAA,SAAA,CAAQM,QAAS,WAAA,OAAMV,EAAaD,KAApC,YACAG,EAAAC,EAAAC,cAAA,SAAA,CAAQM,QAAS,WAAA,OAAMT,EAAWF,KAAlC,OAMR,SAASY,EAATC,GAA6B,IAAVC,EAAUD,EAAVC,QAAUC,EACDC,OAAAA,EAAAA,SAAAA,CAAS,IADRC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACpBK,EADoBH,EAAA,GACbI,EADaJ,EAAA,GAW3B,OACEd,EAAAC,EAAAC,cAAA,OAAA,CAAMiB,SATa,SAAAC,GACnBA,EAAEC,iBAEEJ,IACJN,EAAQM,GACRC,EAAS,OAKPlB,EAAAC,EAAAC,cAAA,QAAA,CACEoB,KAAK,OACLhB,UAAU,QACVW,MAAOA,EACPM,YAAY,aACZC,SAAU,SAAAJ,GAAC,OAAIF,EAASE,EAAEK,OAAOR,WAwD1BS,IAAAA,EAnDf,WAAe,IAAAC,EACad,OAAAA,EAAAA,SAAAA,CAAS,CACjC,CACEN,KAAM,oBACNF,aAAa,GAEf,CACEE,KAAM,wBACNF,aAAa,GAEf,CACEE,KAAM,6BACNF,aAAa,KAZJuB,EAAAb,OAAAC,EAAA,EAAAD,CAAAY,EAAA,GACNE,EADMD,EAAA,GACCE,EADDF,EAAA,GAqBP9B,EAAe,SAAAD,GACnB,IAAMkC,EAAQhB,OAAAiB,EAAA,EAAAjB,CAAOc,GACrBE,EAASlC,GAAOQ,aAAc,EAC9ByB,EAASC,IAGLhC,EAAa,SAAAF,GACjB,IAAMkC,EAAQhB,OAAAiB,EAAA,EAAAjB,CAAOc,GACrBE,EAASE,OAAOpC,EAAO,GACvBiC,EAASC,IAGX,OACE/B,EAAAC,EAAAC,cAAA,MAAA,CAAKI,UAAU,OACbN,EAAAC,EAAAC,cAAA,MAAA,CAAKI,UAAU,aACZuB,EAAMK,IAAI,SAACtC,EAAMC,GAAP,OACTG,EAAAC,EAAAC,cAACR,EAAD,CACEyC,IAAKtC,EACLA,MAAOA,EACPD,KAAMA,EACNE,aAAcA,EACdC,WAAYA,MAGhBC,EAAAC,EAAAC,cAACO,EAAD,CAAUE,QA7BA,SAAAJ,GACd,IAAMwB,EAAQhB,OAAAiB,EAAA,EAAAjB,CAAOc,GAAPO,OAAA,CAAc,CAAE7B,KAAAA,KAC9BuB,EAASC,SC5COM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,EAAAA,EAASC,OAAO3C,EAAAC,EAAAC,cAAC0C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC\",\"sourcesContent\":[\"import React, { useState } from 'react';\\nimport './App.css';\\n\\nfunction Todo({ todo, index, completeTodo, removeTodo }) {\\n  return(\\n    <div style={{textDecoration: todo.isCompleted ? 'line-through' : ''}} className=\\\"todo\\\">\\n      { todo.text }\\n      <div>\\n        <button onClick={() => completeTodo(index)}>Complete</button>\\n        <button onClick={() => removeTodo(index)}>x</button>\\n      </div>\\n    </div>\\n  )\\n}\\n\\nfunction TodoForm({addTodo}) {\\n  const [value, setValue] = useState('');\\n\\n  const handleSubmit = e => {\\n    e.preventDefault();\\n\\n    if(!value) return;\\n    addTodo(value);\\n    setValue('');\\n  }\\n\\n  return (\\n    <form onSubmit={handleSubmit}>\\n      <input \\n        type=\\\"text\\\" \\n        className=\\\"input\\\" \\n        value={value} \\n        placeholder=\\\"Add Todo..\\\"\\n        onChange={e => setValue(e.target.value)} />\\n    </form>\\n  )\\n}\\n\\nfunction App() {\\n  const [todos, setTodos] = useState([\\n    {\\n      text: 'Learn about React',\\n      isCompleted: false\\n    },\\n    {\\n      text: 'Meet friend for lunch',\\n      isCompleted: false\\n    },\\n    {\\n      text: 'Build really cool todo app',\\n      isCompleted: false\\n    },\\n  ]);\\n\\n  const addTodo = text => {\\n    const newTodos = [...todos, { text }];\\n    setTodos(newTodos);\\n  }\\n\\n  const completeTodo = index => {\\n    const newTodos = [...todos];\\n    newTodos[index].isCompleted = true;\\n    setTodos(newTodos);\\n  }\\n\\n  const removeTodo = index => {\\n    const newTodos = [...todos];\\n    newTodos.splice(index, 1);\\n    setTodos(newTodos);\\n  }\\n\\n  return (\\n    <div className=\\\"app\\\">\\n      <div className=\\\"todo-list\\\">\\n        {todos.map((todo, index) => (\\n          <Todo \\n            key={index} \\n            index={index} \\n            todo={todo} \\n            completeTodo={completeTodo}\\n            removeTodo={removeTodo} \\n          />\\n        ))}\\n        <TodoForm addTodo={addTodo} />\\n      </div>\\n    </div>\\n  )\\n}\\n\\nexport default App;\",\"// This optional code is used to register a service worker.\\n// register() is not called by default.\\n\\n// This lets the app load faster on subsequent visits in production, and gives\\n// it offline capabilities. However, it also means that developers (and users)\\n// will only see deployed updates on subsequent visits to a page, after all the\\n// existing tabs open on the page have been closed, since previously cached\\n// resources are updated in the background.\\n\\n// To learn more about the benefits of this model and instructions on how to\\n// opt-in, read http://bit.ly/CRA-PWA\\n\\nconst isLocalhost = Boolean(\\n  window.location.hostname === 'localhost' ||\\n    // [::1] is the IPv6 localhost address.\\n    window.location.hostname === '[::1]' ||\\n    // 127.0.0.1/8 is considered localhost for IPv4.\\n    window.location.hostname.match(\\n      /^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\\n    )\\n);\\n\\nexport function register(config) {\\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\\n    // The URL constructor is available in all browsers that support SW.\\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\\n    if (publicUrl.origin !== window.location.origin) {\\n      // Our service worker won't work if PUBLIC_URL is on a different origin\\n      // from what our page is served on. This might happen if a CDN is used to\\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\\n      return;\\n    }\\n\\n    window.addEventListener('load', () => {\\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\\n\\n      if (isLocalhost) {\\n        // This is running on localhost. Let's check if a service worker still exists or not.\\n        checkValidServiceWorker(swUrl, config);\\n\\n        // Add some additional logging to localhost, pointing developers to the\\n        // service worker/PWA documentation.\\n        navigator.serviceWorker.ready.then(() => {\\n          console.log(\\n            'This web app is being served cache-first by a service ' +\\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\\n          );\\n        });\\n      } else {\\n        // Is not localhost. Just register service worker\\n        registerValidSW(swUrl, config);\\n      }\\n    });\\n  }\\n}\\n\\nfunction registerValidSW(swUrl, config) {\\n  navigator.serviceWorker\\n    .register(swUrl)\\n    .then(registration => {\\n      registration.onupdatefound = () => {\\n        const installingWorker = registration.installing;\\n        if (installingWorker == null) {\\n          return;\\n        }\\n        installingWorker.onstatechange = () => {\\n          if (installingWorker.state === 'installed') {\\n            if (navigator.serviceWorker.controller) {\\n              // At this point, the updated precached content has been fetched,\\n              // but the previous service worker will still serve the older\\n              // content until all client tabs are closed.\\n              console.log(\\n                'New content is available and will be used when all ' +\\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\\n              );\\n\\n              // Execute callback\\n              if (config && config.onUpdate) {\\n                config.onUpdate(registration);\\n              }\\n            } else {\\n              // At this point, everything has been precached.\\n              // It's the perfect time to display a\\n              // \\\"Content is cached for offline use.\\\" message.\\n              console.log('Content is cached for offline use.');\\n\\n              // Execute callback\\n              if (config && config.onSuccess) {\\n                config.onSuccess(registration);\\n              }\\n            }\\n          }\\n        };\\n      };\\n    })\\n    .catch(error => {\\n      console.error('Error during service worker registration:', error);\\n    });\\n}\\n\\nfunction checkValidServiceWorker(swUrl, config) {\\n  // Check if the service worker can be found. If it can't reload the page.\\n  fetch(swUrl)\\n    .then(response => {\\n      // Ensure service worker exists, and that we really are getting a JS file.\\n      const contentType = response.headers.get('content-type');\\n      if (\\n        response.status === 404 ||\\n        (contentType != null && contentType.indexOf('javascript') === -1)\\n      ) {\\n        // No service worker found. Probably a different app. Reload the page.\\n        navigator.serviceWorker.ready.then(registration => {\\n          registration.unregister().then(() => {\\n            window.location.reload();\\n          });\\n        });\\n      } else {\\n        // Service worker found. Proceed as normal.\\n        registerValidSW(swUrl, config);\\n      }\\n    })\\n    .catch(() => {\\n      console.log(\\n        'No internet connection found. App is running in offline mode.'\\n      );\\n    });\\n}\\n\\nexport function unregister() {\\n  if ('serviceWorker' in navigator) {\\n    navigator.serviceWorker.ready.then(registration => {\\n      registration.unregister();\\n    });\\n  }\\n}\\n\",\"import React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport './index.css';\\nimport App from './App';\\nimport * as serviceWorker from './serviceWorker';\\n\\nReactDOM.render(<App />, document.getElementById('root'));\\n\\n// If you want your app to work offline and load faster, you can change\\n// unregister() to register() below. Note this comes with some pitfalls.\\n// Learn more about service workers: http://bit.ly/CRA-PWA\\nserviceWorker.unregister();\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{11:function(e,t,n){},13:function(e,t,n){},15:function(e,t,n){\"use strict\";n.r(t);var o=n(0),a=n.n(o),r=n(4),c=n.n(r),i=(n(11),n(1)),l=n(2);n(13);function u(e){var t=e.todo,n=e.index,o=e.completeTodo,r=e.removeTodo;return a.a.createElement(\"div\",{style:{textDecoration:t.isCompleted?\"line-through\":\"\"},className:\"todo\"},t.text,a.a.createElement(\"div\",null,a.a.createElement(\"button\",{onClick:function(){return o(n)}},\"Complete\"),a.a.createElement(\"button\",{onClick:function(){return r(n)}},\"x\")))}function d(e){var t=e.addTodo,n=Object(o.useState)(\"\"),r=Object(l.a)(n,2),c=r[0],i=r[1];return a.a.createElement(\"form\",{onSubmit:function(e){e.preventDefault(),c&&(t(c),i(\"\"))}},a.a.createElement(\"input\",{type:\"text\",className:\"input\",value:c,placeholder:\"Add Todo..\",onChange:function(e){return i(e.target.value)}}))}var m=function(){var e=Object(o.useState)([{text:\"Learn about React\",isCompleted:!1},{text:\"Meet friend for lunch\",isCompleted:!1},{text:\"Build really cool todo app\",isCompleted:!1}]),t=Object(l.a)(e,2),n=t[0],r=t[1],c=function(e){var t=Object(i.a)(n);t[e].isCompleted=!0,r(t)},m=function(e){var t=Object(i.a)(n);t.splice(e,1),r(t)};return a.a.createElement(\"div\",{className:\"app\"},a.a.createElement(\"div\",{className:\"todo-list\"},n.map(function(e,t){return a.a.createElement(u,{key:t,index:t,todo:e,completeTodo:c,removeTodo:m})}),a.a.createElement(d,{addTodo:function(e){var t=Object(i.a)(n).concat([{text:e}]);r(t)}})))};Boolean(\"localhost\"===window.location.hostname||\"[::1]\"===window.location.hostname||window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));c.a.render(a.a.createElement(m,null),document.getElementById(\"root\")),\"serviceWorker\"in navigator&&navigator.serviceWorker.ready.then(function(e){e.unregister()})},5:function(e,t,n){e.exports=n(15)}},[[5,2,1]]]);","extractedComments":[]}